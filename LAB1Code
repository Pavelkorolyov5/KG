import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ColorPicker extends JFrame {
    private JColorChooser colorChooser;
    private JTextField rgbField, cmykField, hsvField;

    public ColorPicker() {
        setTitle("Color Picker");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        colorChooser = new JColorChooser();
        removeHslTab(colorChooser);
        colorChooser.getSelectionModel().addChangeListener(e -> updateColorFields());

        rgbField = new JTextField();
        cmykField = new JTextField();
        hsvField = new JTextField();

        JPanel fieldsPanel = new JPanel(new GridLayout(3, 1));
        fieldsPanel.add(rgbField);
        fieldsPanel.add(cmykField);
        fieldsPanel.add(hsvField);

        add(colorChooser, BorderLayout.CENTER);
        add(fieldsPanel, BorderLayout.SOUTH);
    }
   
    private void removeHslTab(JColorChooser chooser) {
        for (Component comp : chooser.getComponents()) {

            if (comp instanceof JTabbedPane) {
                JTabbedPane tabbedPane = (JTabbedPane) comp;             
                for (int i = 0; i < tabbedPane.getTabCount(); i++) {
                    String title = tabbedPane.getTitleAt(i);
                    if (title.equalsIgnoreCase("HSL")) {
                        tabbedPane.remove(i);
                        break;
                    }
                }
            }
        }
    }
    private void updateColorFields() {
        Color color = colorChooser.getColor();
        int r = color.getRed();
        int g = color.getGreen();
        int b = color.getBlue();

        rgbField.setText("RGB: " + r + ", " + g + ", " + b);
        cmykField.setText("CMYK: " + rgbToCmyk(r, g, b));
        hsvField.setText("HSV: " + rgbToHsv(r, g, b));
    }

    private String rgbToCmyk(int r, int g, int b) {
        float rf = r / 255f;
        float gf = g / 255f;
        float bf = b / 255f;

        float k = 1 - Math.max(rf, Math.max(gf, bf));
        float c = (1 - rf - k) / (1 - k);
        float m = (1 - gf - k) / (1 - k);
        float y = (1 - bf - k) / (1 - k);

        return String.format("%.2f, %.2f, %.2f, %.2f", c * 100, m * 100, y * 100, k * 100);
    }

    private String rgbToHsv(int r, int g, int b) {
        float rf = r / 255f;
        float gf = g / 255f;
        float bf = b / 255f;

        float max = Math.max(rf, Math.max(gf, bf));
        float min = Math.min(rf, Math.min(gf, bf));
        float delta = max - min;

        float h = 0;
        if (delta != 0) {
            if (max == rf) {
                h = (gf - bf) / delta + (gf < bf ? 6 : 0);
            } else if (max == gf) {
                h = (bf - rf) / delta + 2;
            } else {
                h = (rf - gf) / delta + 4;
            }
            h /= 6;
        }

        float s = max == 0 ? 0 : delta / max;
        float v = max;

        return String.format("%.2f, %.2f, %.2f", h * 360, s * 100, v * 100);
    }

    private int[] cmykToRgb(float c, float m, float y, float k) {
        c /= 100;
        m /= 100;
        y /= 100;
        k /= 100;

        int r = Math.round(255 * (1 - c) * (1 - k));
        int g = Math.round(255 * (1 - m) * (1 - k));
        int b = Math.round(255 * (1 - y) * (1 - k));
        return new int[]{r, g, b};
    }

    private String cmykToHsv(float c, float m, float y, float k) {
        int[] rgb = cmykToRgb(c, m, y, k);
        return rgbToHsv(rgb[0], rgb[1], rgb[2]);
    }

    private float[] hsvToRgb(float h, float s, float v) {
        float c = v * s;
        float x = c * (1 - Math.abs((h / 60) % 2 - 1));
        float m = v - c;

        float rf = 0, gf = 0, bf = 0;
        if (0 <= h && h < 60) {
            rf = c;
            gf = x;
        } else if (60 <= h && h < 120) {
            rf = x;
            gf = c;
        } else if (120 <= h && h < 180) {
            gf = c;
            bf = x;
        } else if (180 <= h && h < 240) {
            gf = x;
            bf = c;
        } else if (240 <= h && h < 300) {
            rf = x;
            bf = c;
        } else if (300 <= h && h < 360) {
            rf = c;
            bf = x;
        }

        int r = Math.round((rf + m) * 255);
        int g = Math.round((gf + m) * 255);
        int b = Math.round((bf + m) * 255);
        return new float[]{r, g, b};
    }

    private String hsvToCmyk(float h, float s, float v) {
        float[] rgb = hsvToRgb(h, s, v);
        return rgbToCmyk((int) rgb[0], (int) rgb[1], (int) rgb[2]);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ColorPicker picker = new ColorPicker();
            picker.setVisible(true);
        });
    }
}
