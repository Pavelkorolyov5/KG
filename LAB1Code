//CMYK Представлен как в классической модели на панели сбоку, так и в модели CMYK 255

import javax.swing.*;
import javax.swing.colorchooser.AbstractColorChooserPanel;
import javax.swing.event.ChangeListener;

import java.awt.*;
import java.awt.event.*;

public class ColorPicker extends JFrame {
    private JColorChooser colorChooser;
    private JTextField rgbField, hsvField;
    private CMYKPanel cmykPanel;

    public ColorPicker() {
        setTitle("Color Picker");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        colorChooser = new JColorChooser();
        removeHslTab(colorChooser);

        colorChooser.getSelectionModel().addChangeListener(e -> updateColorFields());

        rgbField = new JTextField();
        hsvField = new JTextField();
        cmykPanel = new CMYKPanel();

        JPanel fieldsPanel = new JPanel(new GridLayout(2, 1));
        fieldsPanel.add(rgbField);
        fieldsPanel.add(hsvField);

        add(colorChooser, BorderLayout.CENTER);
        add(fieldsPanel, BorderLayout.SOUTH);
        add(cmykPanel, BorderLayout.EAST);
    }

    private void removeHslTab(JColorChooser chooser) {
        // Получаем основной компонент JColorChooser.
        for (Component comp : chooser.getComponents()) {
            if (comp instanceof JTabbedPane) {
                JTabbedPane tabbedPane = (JTabbedPane) comp;
                for (int i = 0; i < tabbedPane.getTabCount(); i++) {
                    String title = tabbedPane.getTitleAt(i);
                    if (title.equalsIgnoreCase("HSL")) {
                        tabbedPane.remove(i);
                        break;
                    }
                }
            }
        }
    }

    private void updateColorFields() {
        Color color = colorChooser.getColor();
        int r = color.getRed();
        int g = color.getGreen();
        int b = color.getBlue();

        rgbField.setText("RGB: " + r + ", " + g + ", " + b);
        hsvField.setText("HSV: " + rgbToHsv(r, g, b));

        // Обновляем CMYK-панель.
        cmykPanel.setRGB(r, g, b);
    }

    private String rgbToHsv(int r, int g, int b) {
        float rf = r / 255f;
        float gf = g / 255f;
        float bf = b / 255f;

        float max = Math.max(rf, Math.max(gf, bf));
        float min = Math.min(rf, Math.min(gf, bf));
        float delta = max - min;

        float h = 0;
        if (delta != 0) {
            if (max == rf) {
                h = (gf - bf) / delta + (gf < bf ? 6 : 0);
            } else if (max == gf) {
                h = (bf - rf) / delta + 2;
            } else {
                h = (rf - gf) / delta + 4;
            }
            h /= 6;
        }

        float s = max == 0 ? 0 : delta / max;
        float v = max;

        return String.format("%.2f, %.2f, %.2f", h * 360, s * 100, v * 100);
    }

    private class CMYKPanel extends JPanel {
        private JSpinner cSpinner, mSpinner, ySpinner, kSpinner;

        public CMYKPanel() {
            setLayout(new GridLayout(5, 1));
            setBorder(BorderFactory.createTitledBorder("CMYK"));

            cSpinner = createSpinner();
            mSpinner = createSpinner();
            ySpinner = createSpinner();
            kSpinner = createSpinner();

            add(new JLabel("C:"));
            add(cSpinner);
            add(new JLabel("M:"));
            add(mSpinner);
            add(new JLabel("Y:"));
            add(ySpinner);
            add(new JLabel("K:"));
            add(kSpinner);
            ChangeListener changeListener = e -> updateColorFromCmyk();
            cSpinner.addChangeListener(changeListener);
            mSpinner.addChangeListener(changeListener);
            ySpinner.addChangeListener(changeListener);
            kSpinner.addChangeListener(changeListener);
        }

        private JSpinner createSpinner() {
            SpinnerNumberModel model = new SpinnerNumberModel(0, 0, 100, 1);
            JSpinner spinner = new JSpinner(model);
            return spinner;
        }
        private void updateColorFromCmyk() {
            int c = (int) cSpinner.getValue();
            int m = (int) mSpinner.getValue();
            int y = (int) ySpinner.getValue();
            int k = (int) kSpinner.getValue();
            int[] rgb = cmykToRgb(c, m, y, k);
            colorChooser.setColor(new Color(rgb[0], rgb[1], rgb[2]));
        }

        public void setRGB(int r, int g, int b) {
            String cmyk = rgbToCmyk(r, g, b);
            String[] values = cmyk.split(", ");
            cSpinner.setValue(Integer.parseInt(values[0]));
            mSpinner.setValue(Integer.parseInt(values[1]));
            ySpinner.setValue(Integer.parseInt(values[2]));
            kSpinner.setValue(Integer.parseInt(values[3]));
        }

        private int[] cmykToRgb(int c, int m, int y, int k) {
            float cValue = c / 100f;
            float mValue = m / 100f;
            float yValue = y / 100f;
            float kValue = k / 100f;

            int r = Math.round(255 * (1 - cValue) * (1 - kValue));
            int g = Math.round(255 * (1 - mValue) * (1 - kValue));
            int b = Math.round(255 * (1 - yValue) * (1 - kValue));
            return new int[]{r, g, b};
        }

        private String rgbToCmyk(int r, int g, int b) {
            float rf = r / 255f;
            float gf = g / 255f;
            float bf = b / 255f;

            float k = 1 - Math.max(rf, Math.max(gf, bf));
            float c = (1 - rf - k) / (1 - k);
            float m = (1 - gf - k) / (1 - k);
            float y = (1 - bf - k) / (1 - k);

            return String.format("%d, %d, %d, %d",
                    Math.round(c * 100),
                    Math.round(m * 100),
                    Math.round(y * 100),
                    Math.round(k * 100));
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ColorPicker picker = new ColorPicker();
            picker.setVisible(true);
        });
    }
}
