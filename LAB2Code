import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class ImageProcessingApp extends JFrame {

    private JLabel imageLabel;
    private BufferedImage originalImage;

    public ImageProcessingApp() {
        setTitle("Image Processing Application");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

       
        imageLabel = new JLabel();
        JScrollPane scrollPane = new JScrollPane(imageLabel);
        scrollPane.setPreferredSize(new Dimension(780, 500));

     
        JButton uploadButton = new JButton("Загрузить изображение");
        uploadButton.addActionListener(e -> loadImage());

    
        JButton segmentButton = new JButton("Сегментация (обнаружение краев)");
        segmentButton.addActionListener(e -> applySegmentation());


        JButton bernsenButton = new JButton("Глобальная пороговая обработка (Бернсен)");
        bernsenButton.addActionListener(e -> applyBernsenThresholding());

   
        JButton niblackButton = new JButton("Глобальная пороговая обработка (Ниблэк)");
        niblackButton.addActionListener(e -> applyNiblackThresholding());


        JPanel controlPanel = new JPanel();
        controlPanel.add(uploadButton);
        controlPanel.add(segmentButton);
        controlPanel.add(bernsenButton);
        controlPanel.add(niblackButton);

  
        add(scrollPane, BorderLayout.CENTER);
        add(controlPanel, BorderLayout.SOUTH);
    }


    private void loadImage() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                originalImage = ImageIO.read(selectedFile);
                ImageIcon imageIcon = new ImageIcon(originalImage);
                imageLabel.setIcon(imageIcon);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Ошибка загрузки изображения", "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

 
    private void applySegmentation() {
        if (originalImage == null) return;

        BufferedImage edgeImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_BYTE_GRAY);

        for (int x = 1; x < originalImage.getWidth() - 1; x++) {
            for (int y = 1; y < originalImage.getHeight() - 1; y++) {
                int pixelX = (
                        (-1 * getGrayValue(originalImage, x - 1, y - 1)) + (1 * getGrayValue(originalImage, x + 1, y - 1)) +
                        (-2 * getGrayValue(originalImage, x - 1, y)) + (2 * getGrayValue(originalImage, x + 1, y)) +
                        (-1 * getGrayValue(originalImage, x - 1, y + 1)) + (1 * getGrayValue(originalImage, x + 1, y + 1))
                );
                int pixelY = (
                        (-1 * getGrayValue(originalImage, x - 1, y - 1)) + (-2 * getGrayValue(originalImage, x, y - 1)) + (-1 * getGrayValue(originalImage, x + 1, y - 1)) +
                        (1 * getGrayValue(originalImage, x - 1, y + 1)) + (2 * getGrayValue(originalImage, x, y + 1)) + (1 * getGrayValue(originalImage, x + 1, y + 1))
                );

                int magnitude = Math.min(255, Math.abs(pixelX) + Math.abs(pixelY));
                edgeImage.setRGB(x, y, (magnitude << 16) | (magnitude << 8) | magnitude);
            }
        }

        ImageIcon imageIcon = new ImageIcon(edgeImage);
        imageLabel.setIcon(imageIcon);
    }

 
    private void applyBernsenThresholding() {
        if (originalImage == null) return;

        int windowSize = 15;
        BufferedImage bernsenImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_BYTE_BINARY);

        for (int x = 0; x < originalImage.getWidth(); x++) {
            for (int y = 0; y < originalImage.getHeight(); y++) {
                int minGray = 255;
                int maxGray = 0;

         
                for (int i = -windowSize / 2; i <= windowSize / 2; i++) {
                    for (int j = -windowSize / 2; j <= windowSize / 2; j++) {
                        int neighborX = Math.max(0, Math.min(x + i, originalImage.getWidth() - 1));
                        int neighborY = Math.max(0, Math.min(y + j, originalImage.getHeight() - 1));
                        int gray = getGrayValue(originalImage, neighborX, neighborY);
                        minGray = Math.min(minGray, gray);
                        maxGray = Math.max(maxGray, gray);
                    }
                }

                int threshold = (minGray + maxGray) / 2;
                int pixelGray = getGrayValue(originalImage, x, y);

                if (pixelGray > threshold) {
                    bernsenImage.setRGB(x, y, 0xFFFFFF); 
                } else {
                    bernsenImage.setRGB(x, y, 0x000000); 
                }
            }
        }

        ImageIcon imageIcon = new ImageIcon(bernsenImage);
        imageLabel.setIcon(imageIcon);
    }

   
    private void applyNiblackThresholding() {
        if (originalImage == null) return;

        int windowSize = 15;
        double k = -0.2;
        BufferedImage niblackImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_BYTE_BINARY);

        for (int x = 0; x < originalImage.getWidth(); x++) {
            for (int y = 0; y < originalImage.getHeight(); y++) {
                int sum = 0;
                int sumSq = 0;
                int count = 0;


                for (int i = -windowSize / 2; i <= windowSize / 2; i++) {
                    for (int j = -windowSize / 2; j <= windowSize / 2; j++) {
                        int neighborX = Math.max(0, Math.min(x + i, originalImage.getWidth() - 1));
                        int neighborY = Math.max(0, Math.min(y + j, originalImage.getHeight() - 1));
                        int gray = getGrayValue(originalImage, neighborX, neighborY);
                        sum += gray;
                        sumSq += gray * gray;
                        count++;
                    }
                }

                double mean = (double) sum / count;
                double variance = ((double) sumSq / count) - (mean * mean);
                double stdDev = Math.sqrt(variance);

                int threshold = (int) (mean + k * stdDev);
                int pixelGray = getGrayValue(originalImage, x, y);

                if (pixelGray > threshold) {
                    niblackImage.setRGB(x, y, 0xFFFFFF); 
                } else {
                    niblackImage.setRGB(x, y, 0x000000); 
                }
            }
        }

        ImageIcon imageIcon = new ImageIcon(niblackImage);
        imageLabel.setIcon(imageIcon);
    }

 
    private int getGrayValue(BufferedImage image, int x, int y) {
        int rgb = image.getRGB(x, y);
        int r = (rgb >> 16) & 0xff;
        int g = (rgb >> 8) & 0xff;
        int b = rgb & 0xff;
        return (r + g + b) / 3;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ImageProcessingApp app = new ImageProcessingApp();
            app.setVisible(true);
        });
    }
}

